{"ast":null,"code":"import _slicedToArray from \"/Users/Jossendal/Desktop/projects/contacts-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Jossendal/Desktop/projects/contacts-keeper/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ContactContext from './contactContext';\nimport ContactReducer from './ContactReducer';\nimport { ADD_CONTACT, GET_CONTACTS, CLEAR_CONTACTS, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n\n  const _useReducer = useReducer(ContactReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // Get Contacts\n\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.get('/api/contacts');\n      dispatch({\n        type: GET_CONTACTS\n      });\n    } catch (error) {\n      console.error('Error getting contacts', error);\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: error.response.msg\n      });\n    }\n  }; // Add Contact\n\n\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (error) {\n      console.error('Error adding contact', error);\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: error.response.msg\n      });\n    }\n  }; // Delete Contact\n\n\n  const deleteContact = id => {\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  }; // Set current contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear current contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // update contact\n\n\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: contact\n    });\n  }; // filter contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; // clear filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return React.createElement(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      getContacts,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/Users/Jossendal/Desktop/projects/contacts-keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","ContactContext","ContactReducer","ADD_CONTACT","GET_CONTACTS","CLEAR_CONTACTS","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","get","type","console","payload","response","msg","addContact","contact","config","headers","post","data","deleteContact","id","setCurrent","clearCurrent","updateContact","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\n\nimport ContactContext from './contactContext';\nimport ContactReducer from './ContactReducer';\n\nimport {\n    ADD_CONTACT,\n    GET_CONTACTS,\n    CLEAR_CONTACTS,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    FILTER_CONTACTS,\n    CLEAR_FILTER,\n    CONTACT_ERROR,\n} from '../types';\n\nconst ContactState = props => {\n    const initialState = {\n        contacts: [],\n        current: null,\n        filtered: null,\n        error: null,\n    };\n\n    const [state, dispatch] = useReducer(ContactReducer, initialState);\n    // Get Contacts\n    const getContacts = async () => {\n        try {\n            const res = await axios.get('/api/contacts');\n            dispatch({ type: GET_CONTACTS });\n        } catch (error) {\n            console.error('Error getting contacts', error);\n            dispatch({ type: CONTACT_ERROR, payload: error.response.msg });\n        }\n    };\n    // Add Contact\n    const addContact = async contact => {\n        const config = {\n            headers: { 'Content-Type': 'application/json' },\n        };\n        try {\n            const res = await axios.post('/api/contacts', contact, config);\n            dispatch({ type: ADD_CONTACT, payload: res.data });\n        } catch (error) {\n            console.error('Error adding contact', error);\n            dispatch({ type: CONTACT_ERROR, payload: error.response.msg });\n        }\n    };\n    // Delete Contact\n    const deleteContact = id => {\n        dispatch({ type: DELETE_CONTACT, payload: id });\n    };\n    // Set current contact\n    const setCurrent = contact => {\n        dispatch({ type: SET_CURRENT, payload: contact });\n    };\n    // Clear current contact\n    const clearCurrent = () => {\n        dispatch({ type: CLEAR_CURRENT });\n    };\n    // update contact\n    const updateContact = contact => {\n        dispatch({ type: UPDATE_CONTACT, payload: contact });\n    };\n    // filter contacts\n    const filterContacts = text => {\n        dispatch({ type: FILTER_CONTACTS, payload: text });\n    };\n    // clear filter\n    const clearFilter = () => {\n        dispatch({ type: CLEAR_FILTER });\n    };\n    return (\n        <ContactContext.Provider\n            value={{\n                contacts: state.contacts,\n                current: state.current,\n                filtered: state.filtered,\n                error: state.error,\n                getContacts,\n                addContact,\n                deleteContact,\n                setCurrent,\n                clearCurrent,\n                updateContact,\n                filterContacts,\n                clearFilter,\n            }}\n        >\n            {props.children}\n        </ContactContext.Provider>\n    );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}